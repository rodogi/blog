<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <docs>https://blogs.law.harvard.edu/tech/rss</docs>
    <title>Posts on rodrigo dorantes-gilardi</title>
    <link>https://rodogi.github.io/post/</link>
    <description>Recent content in Posts on rodrigo dorantes-gilardi</description>
    <image>
      <title>Posts on rodrigo dorantes-gilardi</title>
      <link>https://rodogi.github.io/post/</link>
      <url>https://source.unsplash.com/collection/983219/2000x1322</url>
    </image>
    <ttl>1440</ttl>
    <generator>After Dark 9.1.0 (Hugo 0.58.2)</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 28 Sep 2019 20:20:40 UT</lastBuildDate>
    <atom:link href="https://rodogi.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A quick look at the Mexican national system of researchers with Python</title>
      <link>https://rodogi.github.io/a-quick-look-at-the-mexican-national-system-of-researchers-with-python/</link>
      <pubDate>Sat, 28 Sep 2019 05:00:00 UT</pubDate>
      <dc:creator>[Rodrigo Dorantes-Gilardi]</dc:creator>
      <guid>https://rodogi.github.io/a-quick-look-at-the-mexican-national-system-of-researchers-with-python/</guid>
      <description>SNI The national system of researchers (Sistema Nacional de Investigadores) or SNI is a mexican public organization that aims at boosting national research by giving grants to outstanding researchers working in the country.
It was founded in 1984 and since then, it has been a key component of the Mexican science. Yesterday, the SNI published the list of accepted, renewed, or upgraded candidates in 2019. It did so in a PDF format that you can find here.</description>
      <content:encoded><![CDATA[ SNI The national system of researchers (Sistema Nacional de Investigadores) or SNI is a mexican public organization that aims at boosting national research by giving grants to outstanding researchers working in the country.
It was founded in 1984 and since then, it has been a key component of the Mexican science. Yesterday, the SNI published the list of accepted, renewed, or upgraded candidates in 2019. It did so in a PDF format that you can find here. I decided to take a quick look at the list to see what is new under the sun.
Basic Overview If we go to this link, we can see the records of the actual researchers that are members in the SNI as of 2018. I&amp;rsquo;ve downloaded this excel file in my Downloads folder and read it using pandas.
import pandas as pd df_all = pd.read_excel(&amp;#39;/Users/rdora/Downloads/BENEFICIARIOS_2018.xlsx&amp;#39;) # Just take the first 14 columns df_all = df.iloc[:, 0:14] print(df.shape) According to this, there are 28,633 SNI researchers. We&amp;rsquo;ll keep this table for later.
2019 Stats On September 27, SNI published the list of accepted and kept candidates for 2019. This list is a bit more tricky to read as it is on a PDF file. Python can read tables on PDF files using a library called tabula-py, that you can install with pip install tabula-py. Later, you can read the file as follows.
import tabula path = &amp;#34;/Users/rdora/Downloads/RESULTADOS_SNI_CONVOCATORIA_2019_INGRESO_O_PERMANENCIA.pdf&amp;#34; # The file contains 203 pages pages = range(1, 204) dfs = [] # We have to read each page individually for page in pages: df = tabula.read_pdf(path, pages=str(page)) dfs.append(df) df = pd.concat(dfs, axis=0) df = df.dropna() After reading the table, and doing some cleaning (reading from a PDF is not cool), we can see that there are 9,942 candidates with their SNI ID (defined by level of addition to the SNI), their name, and their distinction (SNI level, from candidate to SNI level 3).
Let&amp;rsquo;s get the number of new candidates.
df_all[&amp;#39;NAME&amp;#39;] = (df_all[&amp;#39;PATERNO&amp;#39;] &#43; &amp;#34; &amp;#34; &#43; df_all[&amp;#39;MATERNO&amp;#39;] &#43; &amp;#34;,&amp;#34; &#43; df_all[&amp;#34;NOMBRE&amp;#34;]) df_new = df[~df.NOMBRE.isin(df_all.NAME)] There are 5,338 new researchers in the SNI in 2019. Using this pd.DataFrame we can get the number of women and their distinction or level in the SNI. From these, 0.58 are Male and 0.42 are Female. The overall ratio of female researchers (without the new members) is 0.37.

   Figure 1: Gender distribution new members    
   Figure 2: Gender distribution old members    Applicants are assigned 1 of 6 categories:
 C: candidate PC1: candidate-level extension 1 year PC2: candidate-level extension 2 years 1: SNI level 1 2: SNI level 2 3: SNI level 3  New members are mostly candidates (54%) and SNI level 1 (38%) and only 1.5% were assigned the title of SNI level 3.

   Figure 3: New members by SNI level    Female new members are more likely to be candidates (57% of female population) than males (51%), SNI male new members are 1.5 times more likely (4.2%) to be SNI-level 2 than their female counterparts (2.9%) and 3 times more likely to be SNI-level 3 (2% and 0.7%, respectively).

   Figure 4: New members by SNI level: Males    
   Figure 5: New members by SNI level: Females    ]]></content:encoded>
    </item>
    <item>
      <title>Emacs config file</title>
      <link>https://rodogi.github.io/emacs-config-file/</link>
      <pubDate>Thu, 26 Sep 2019 05:00:00 UT</pubDate>
      <dc:creator>[Rodrigo Dorantes-Gilardi]</dc:creator>
      <guid>https://rodogi.github.io/emacs-config-file/</guid>
      <description>I recently went for a full migration to an org file, and things be said, my config file looks way more tidy. I recommend to make the change to have a more literal programming kind of init file.
This file is of course continuously being updated, you can see the updated version here.
Personal info (setq user-full-name &amp;#34;Rodrigo Dorantes Gilardi&amp;#34; user-mail-address &amp;#34;rodgdor@gmail.com&amp;#34; calendar-latitude 19.4326 calendar-longitude -99.13 calendar-location-name &amp;#34;Mexico City&amp;#34;) use-package This configuration is inspired by Harry Schwartz config file.</description>
      <content:encoded><![CDATA[ I recently went for a full migration to an org file, and things be said, my config file looks way more tidy. I recommend to make the change to have a more literal programming kind of init file.
This file is of course continuously being updated, you can see the updated version here.
Personal info (setq user-full-name &amp;#34;Rodrigo Dorantes Gilardi&amp;#34; user-mail-address &amp;#34;rodgdor@gmail.com&amp;#34; calendar-latitude 19.4326 calendar-longitude -99.13 calendar-location-name &amp;#34;Mexico City&amp;#34;) use-package This configuration is inspired by Harry Schwartz config file. So let&amp;rsquo;s first start by setting use-package.
use-package is already installed in init.el file, but we want to make sure that all packages added for configuration are installed, for this we use use-package-ensure.
(require &amp;#39;use-package-ensure) (setq use-package-always-ensure t) Always compile packages, and use the newest version available.
(use-package auto-compile :config (auto-compile-on-load-mode)) (setq load-prefer-newer t) Sensible defaults Some sensible, rational defaults that help when writing/reading code.
;; Set line numbers and relative mode (global-display-line-numbers-mode) ;; Ask y/n instead of yes/no (fset &amp;#39;yes-or-no-p &amp;#39;y-or-n-p) ;; When you double-click on a file in the Mac Finder open it as a ;; buffer in the existing Emacs frame, rather than creating a new ;; frame just for that file. (setq ns-pop-up-frames nil) More sensible indentation (2 instead of 8 spaces).
(setq-default tab-width 2) Remove the annoying bell sound from Emacs.
(setq ring-bell-function &amp;#39;ignore) Get proper line breaks, 100 for text and 80 for programming.
(dolist (hook &amp;#39;(text-mode-hook latex-mode-hook tex-mode-hook)) (add-hook hook (lambda () (set-fill-column 100)))) (dolist (hook &amp;#39;(python-mode-hook prog-mode-hook list-mode-hook)) (add-hook hook (lambda () (set-fill-column 80)))) Wrap paragraphs automatically
(add-hook &amp;#39;text-mode-hook &amp;#39;auto-fill-mode) (add-hook &amp;#39;org-mode-hook &amp;#39;auto-fill-mode) Deal with pop-up windows better with popwin.
(use-package popwin :config (popwin-mode 1) ;; set all buffers to appear to the right (push &amp;#39;(help-mode :position right :width 0.45) popwin:special-display-config)) Count the number of occurrences of a word when searched.
(use-package anzu :config (global-anzu-mode &#43;1) (global-set-key [remap query-replace] &amp;#39;anzu-query-replace) (global-set-key [remap query-replace-regexp] &amp;#39;anzu-query-replace-regexp)) Set the number of the column
(setq column-number-mode 1) Stop the cursor from blinking.
(blink-cursor-mode -1) Disable auto backup files.
(setq-default backup-inhibited t) Evil Load evil.
(use-package evil :config (evil-mode 1)) Enable vim-surround everywhere.
(use-package evil-surround :config (global-evil-surround-mode 1)) Use up or down-stream search of visually selected object.
(use-package evil-escape :init (evil-escape-mode) :config (setq-default evil-escape-key-sequence &amp;#34;jk&amp;#34;))(use-package evil-visualstar :config (global-evil-visualstar-mode) (setq evil-visualstar/persistent nil)) UI Remove the scroll bar and the menu.
(tool-bar-mode 0) (menu-bar-mode 0) (scroll-bar-mode 0) (set-window-scroll-bars (minibuffer-window) nil nil) Use full-path-name of file in window
(setq frame-title-format &amp;#39;((:eval (if (buffer-file-name) (abbreviate-file-name (buffer-file-name)) &amp;#34;%b&amp;#34;)))) Use zenburn theme and set font and mode bar.
(use-package zenburn-theme :config (load-theme &amp;#39;zenburn t) (let ((line (face-attribute &amp;#39;mode-line :underline))) (set-face-attribute &amp;#39;mode-line nil :overline line) (set-face-attribute &amp;#39;mode-line-inactive nil :overline line) (set-face-attribute &amp;#39;mode-line-inactive nil :underline line) (set-face-attribute &amp;#39;mode-line nil :box nil) (set-face-attribute &amp;#39;mode-line-inactive nil :box nil) (set-face-attribute &amp;#39;mode-line-inactive nil :background &amp;#34;#f9f2d9&amp;#34;))) (set-frame-font &amp;#34;IBM Plex Mono-14&amp;#34; nil t) ;; Use moody for the mode bar (use-package moody :config (setq x-underline-at-descent-line t) (moody-replace-mode-line-buffer-identification) (moody-replace-vc-mode)) Hide minor modes from bar.
(use-package minions :config (setq minions-mode-line-lighter &amp;#34;&amp;#34; minions-mode-line-delimiters &amp;#39;(&amp;#34;&amp;#34; . &amp;#34;&amp;#34;)) (minions-mode 1)) Highlight the current line.
(global-hl-line-mode) Highlight uncommited changes.
(use-package diff-hl :config (add-hook &amp;#39;prog-mode-hook &amp;#39;turn-on-diff-hl-mode)) Change the specs for the cursor.
(setq evil-insert-state-cursor &amp;#39;((bar . 2) &amp;#34;yellow&amp;#34;) evil-normal-state-cursor &amp;#39;(box &amp;#34;yellow&amp;#34;)) Spelling (dolist (hook &amp;#39;(org-mode-hook latex-mode-hook tex-mode-hook git-commit-mode-hook)) (add-hook hook (lambda () (flyspell-mode 1)))) ;;; Setting english to be the spelling language (setq ispell-program-name &amp;#34;/usr/local/bin/aspell&amp;#34;) (setq ispell-dictionary &amp;#34;english&amp;#34;) Python Basics We start by making the symbol `_` as part of the word.
(add-hook &amp;#39;python-mode-hook #&amp;#39;(lambda () (modify-syntax-entry ?_ &amp;#34;w&amp;#34;))) Elpy Let&amp;rsquo;s start with installing elpy. Also, let&amp;rsquo;s add jedi as the
(use-package elpy :init (elpy-enable) :bind (&amp;#34;M-.&amp;#34; . elpy-goto-definition) :config ;; The path to python3 (setq exec-path (append exec-path &amp;#39;(&amp;#34;/usr/local/bin&amp;#34;))) (setenv &amp;#34;PATH&amp;#34; (concat (getenv &amp;#34;PATH&amp;#34;) &amp;#34;:/usr/local/bin&amp;#34;)) (setq elpy-rpc-python-command &amp;#34;/usr/local/bin/python3&amp;#34;)) Then a little bit of configuration for the interpreter.
(use-package python :mode (&amp;#34;\\.py\\&amp;#39;&amp;#34; . python-mode) :interpreter (&amp;#34;python&amp;#34; . python-mode) :config (setq python-shell-interpreter &amp;#34;/usr/local/bin/jupyter&amp;#34; python-shell-interpreter-args &amp;#34;console --simple-prompt&amp;#34; python-shell-prompt-detect-failure-warning nil) add-to-list &amp;#39;python-shell-completion-native-disabled-interpreters &amp;#34;jupyter&amp;#34;)) Use jedi for autocompletion. If used for the first time, we need to run the command M-x jedi:install-server.
(use-package jedi :config (add-hook &amp;#39;python-mode-hook &amp;#39;jedi:setup) (setq jedi:complete-on-dot t)) Use flycheck for syntax checking.
(use-package flycheck :config (add-hook &amp;#39;elpy-mode-hook &amp;#39;flycheck-mode)) Format according to pep-8 on save.
(use-package py-autopep8 :config (add-hook &amp;#39;elpy-mode-hook &amp;#39;py-autopep8-enable-on-save)) Org General First things first
(use-package org) ;; The following is to fix a bug to be able to expand ;; &amp;#39;&amp;lt;s&amp;#39; to code block. (when (version&amp;lt;= &amp;#34;9.2&amp;#34; (org-version)) (require &amp;#39;org-tempo)) Display Use bullets instead of stars.
(use-package org-bullets :init (add-hook &amp;#39;org-mode-hook &amp;#39;org-bullets-mode)) Let&amp;rsquo;s add an arrow pointing down if there is some content. Also, let&amp;rsquo;s use syntax highlighting inside of code blocks.
(setq org-ellipsis &amp;#34;⤵&amp;#34;) (setq org-src-tab-acts-natively t) Agenda Add key-binding \C-ca to invoke agenda. Also, add a directory for agenda files inside Dropbox.
(global-set-key &amp;#34;\C-ca&amp;#34; &amp;#39;org-agenda) (setq org-agenda-files &amp;#39;(&amp;#34;~/Dropbox/org/&amp;#34;)) TODO headers can have more states (additionally to TODO and DONE), also let&amp;rsquo;s add a file to archive all the TODO trees completed.
;; Workflow of TODO keywords (setq org-todo-keywords &amp;#39;((sequence &amp;#34;TODO(t)&amp;#34; &amp;#34;|&amp;#34; &amp;#34;DONE(d!)&amp;#34; &amp;#34;CANCELED(c@/!)&amp;#34;))) ;; archive in a datetree (setq org-archive-location &amp;#34;~/org/archive.org::datetree/&amp;#34;) ;; Close TODOs with a timestamp (setq org-log-done &amp;#39;time) Capture Emacs allows to capture ideas &amp;ldquo;on the fly&amp;rdquo; using a template, that way, you don&amp;rsquo;t need to stop working on something else when the idea pops-up. We, first are going to create a keybinding for that function and then we will create the templates.
(global-set-key &amp;#34;\C-cc&amp;#34; &amp;#39;org-capture) (setq org-capture-templates &amp;#39;((&amp;#34;b&amp;#34; &amp;#34;Blog idea&amp;#34; entry (file &amp;#34;~/Dropbox/notes/blog_ideas.org&amp;#34;) &amp;#34;* %?\n&amp;#34;))) Export Classes Allow export to different classes, including beamer, markdown, hugo, latex&amp;hellip;
(require &amp;#39;ox-beamer) (use-package ox-hugo :after ox) ;; Pretty html (use-package ox-twbs) Code blocks Allow to evaluate code in python, C, bash, and elisp.
(org-babel-do-load-languages &amp;#39;org-babel-load-languages &amp;#39;((C . t) (python . t) (emacs-lisp . t) (shell . t))) Allow TAB to function normally inside code blocks.
(setq org-src-tab-acts-natively t) Latex Set the process of compilation of a latex document.
(setq org-latex-pdf-process &amp;#39;(&amp;#34;pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f&amp;#34; &amp;#34;bibtex %b&amp;#34; &amp;#34;pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f&amp;#34; &amp;#34;pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f&amp;#34;)) Set sections used in latex section when exported.
(add-to-list &amp;#39;org-latex-classes &amp;#39;(&amp;#34;article&amp;#34; &amp;#34;\\documentclass{article}&amp;#34; (&amp;#34;\\section{%s}&amp;#34; . &amp;#34;\\section*{%s}&amp;#34;) (&amp;#34;\\subsection{%s}&amp;#34; . &amp;#34;\\subsection*{%s}&amp;#34;) (&amp;#34;\\subsubsection{%s}&amp;#34; . &amp;#34;\\subsubsection*{%s}&amp;#34;) (&amp;#34;\\paragraph{%s}&amp;#34; . &amp;#34;\\paragraph*{%s}&amp;#34;) (&amp;#34;\\subparagraph{%s}&amp;#34; . &amp;#34;\\subparagraph*{%s}&amp;#34;))) Include minted package in latex exports.
;;; Include minted package in all LaTeX reports (add-to-list &amp;#39;org-latex-packages-alist &amp;#39;(&amp;#34;&amp;#34; &amp;#34;minted&amp;#34;)) (setq org-latex-listing &amp;#39;minted) Use the incredible org-ref package.
(use-package org-ref) Magit Magit is a great package where I prefer its keybinding to C-x g rather than C-x m.
(use-package magit :config (global-set-key (kbd &amp;#34;C-x g&amp;#34;) &amp;#39;magit-status)) Helm Helm is great for file exploration.
(use-package helm :config (helm-mode 1) (global-set-key (kbd &amp;#34;C-x C-f&amp;#34;) &amp;#39;helm-find-files)) Let&amp;rsquo;s bind `C-f C-a` to helm-apropos
(global-set-key (kbd &amp;#34;C-x C-a&amp;#34;) &amp;#39;helm-apropos) Let&amp;rsquo;s look for commands with helm.
(global-set-key (kbd &amp;#34;M-x&amp;#34;) &amp;#39;helm-M-x) Set helm to fuzzy matching.
(setq helm-M-x-fuzzy-match t) Show the kill-ring with helm
(global-set-key (kbd &amp;#34;M-y&amp;#34;) &amp;#39;helm-show-kill-ring) Get a better buffer to change buffers. Also, enable fuzzy matching in there.
(global-set-key (kbd &amp;#34;C-x b&amp;#34;) &amp;#39;helm-mini) (global-set-key (kbd &amp;#34;C-x C-b&amp;#34;) &amp;#39;helm-mini) (setq helm-buffers-fuzzy-matching t helm-recentf-fuzzy-match t) Let&amp;rsquo;s set semantic-mode to be able to use `helm-semantic` and then bind it to &amp;lsquo;C-x C-m&amp;rsquo;. Bind heml-imenu to `C-x C-m`.
(use-package semantic :config (semantic-mode 1)) (global-set-key (kbd &amp;#34;C-x C-m&amp;#34;) &amp;#39;helm-semantic-or-imenu) Now let&amp;rsquo;s make it fuzzy matchers.
(setq helm-semantic-fuzzy-match t helm-imenu-fuzzy-match t) Use heml-occur with &amp;lsquo;C-x C-o&amp;rsquo;.
(global-set-key (kbd &amp;#34;C-x C-o&amp;#34;) &amp;#39;helm-occur) Dired Switch the default `ls` to have the parameters `lhva`.
 l: long format h: human readable size S: sort files by size a: all files (including dotfiles) r: reverse the sort   (setq dired-listing-switches &amp;#34;-AlShr&amp;#34;) Projectile Projectile is a package to work on projects defined by a directory. Let&amp;rsquo;s first install it.
(use-package projectile :config (projectile-mode &#43;1) (define-key projectile-mode-map (kbd &amp;#34;s-p&amp;#34;) &amp;#39;projectile-command-map) (define-key projectile-mode-map (kbd &amp;#34;C-c p&amp;#34;) &amp;#39;projectile-command-map))]]></content:encoded>
    </item>
    <item>
      <title>What cities appear more often in El País articles?</title>
      <link>https://rodogi.github.io/what-cities-appear-more-often-in-el-pa%C3%ADs-articles/</link>
      <pubDate>Mon, 22 Jul 2019 05:00:00 UT</pubDate>
      <dc:creator>[Rodrigo Dorantes-Gilardi]</dc:creator>
      <guid>https://rodogi.github.io/what-cities-appear-more-often-in-el-pa%C3%ADs-articles/</guid>
      <description>Introduction El País is one of the most well-known newspapers in the Hispanic world. Personally, it is one of my favorites as its American (Latin American) version has news from all over the region (I live in Mexico).
I&amp;rsquo;ve been an `El País&amp;rsquo; reader for a few years now, and I can&amp;rsquo;t help but notice that the Latin American version is not that well balanced. Indeed, most of the articles I see on their front page come from Mexico.</description>
      <content:encoded><![CDATA[ Introduction El País is one of the most well-known newspapers in the Hispanic world. Personally, it is one of my favorites as its American (Latin American) version has news from all over the region (I live in Mexico).
I&amp;rsquo;ve been an `El País&amp;rsquo; reader for a few years now, and I can&amp;rsquo;t help but notice that the Latin American version is not that well balanced. Indeed, most of the articles I see on their front page come from Mexico.
In order to get the countries of the main articles, I took all the articles on the front-page from 2018 using python modules requests and beautifulsoup.
Results El País front-page website is written in html and has its articles separated by &amp;lt;article&amp;gt; and &amp;lt;/article&amp;gt; tags. Inside these tags you can find the title of the article with the class &amp;quot;articulo-titulo&amp;quot; and the location of the article with class &amp;quot;articulo-localizacion&amp;quot; inside a dev tag.
After getting the text from the article with:
import requests from bs4 import BeautifulSoup r = requests.get(&amp;#39;https://elpais.com/elpais/portada_america.html&amp;#39;) soup = BeautifulSoup(r,text, &amp;#39;html&amp;#39;) articles = soup.find_all(&amp;#39;article&amp;#39;, attrs={&amp;#39;class&amp;#39;: &amp;#39;articulo&amp;#39;}) loc = soup.find_all(&amp;#39;span&amp;#39;, attrs={&amp;#39;class&amp;#39;: &amp;#39;articulo-localizacion&amp;#39;}) Using calendar and doing the proper formatting for months and days, it&amp;rsquo;s easy to parse through a year of front-page articles. The resulting 33,285 articles contain:
 17,368 not found locations 703 cities 52 cities with more than 20 appearances in an article (See 1) The most frequent city is Madrid (3327) following by Mexico City (2191)  
   Figure 1: Frequency of cities with more than 20 appearances in El País front-page, Latin American version.    Conclusion Even if the version I scanned was the Latin American version,
 Madrid still upholds the most appearances Mexico City is second place Two U.S. cities are third and fourth Followed by Buenos Aires and Bogotá  Overall, Latin American cities seem to be over-represented (world-wide-like), but Mexico City is the only Latin American city that appears to be preferred by the editors. Nonetheless, the journal is Spaniard and Spanish news seem to have the most articles even in the Latin American version of the newspaper.
]]></content:encoded>
    </item>
    <item>
      <title>Create a network with Graph-tool and Pandas</title>
      <link>https://rodogi.github.io/create-a-network-with-graph-tool-and-pandas/</link>
      <pubDate>Wed, 26 Jun 2019 05:00:00 UT</pubDate>
      <dc:creator>[Rodrigo Dorantes-Gilardi]</dc:creator>
      <guid>https://rodogi.github.io/create-a-network-with-graph-tool-and-pandas/</guid>
      <description>Graph-tool Recently, I discovered the python package graph-tool for network analysis. The advantage of graph-tool over the very popular networkx is the speed, as said by its creator:
Contrary to most other python modules with similar functionality, the core data structures and
algorithms are implemented in C&#43;&#43;, making extensive use of template metaprogramming, based heavily
on the Boost Graph Library. This confers it a level of performance that is comparable (both in</description>
      <content:encoded><![CDATA[ Graph-tool Recently, I discovered the python package graph-tool for network analysis. The advantage of graph-tool over the very popular networkx is the speed, as said by its creator:
Contrary to most other python modules with similar functionality, the core data structures and
algorithms are implemented in C&#43;&#43;, making extensive use of template metaprogramming, based heavily
on the Boost Graph Library. This confers it a level of performance that is comparable (both in
memory usage and computation time) to that of a pure C/C&#43;&#43; library.
---Tiago Peixoto
Some other really cool features (besides speed) of graph-tool are:
 Filters and views get subgraphs without creating a new python object Interactive drawing Beautiful layouts Topological algorithms  Cons:
 Could use more documentation examples.  Pandas &#43; graph-tool It is very convenient to analyze networks using tables to look at:
 Structural parameters (e.g. degree: mean, std, max min) Node and edge lists with attributes  And even have the network in the form of an edge-list of the sort:
 .my-table th, .my-table td { padding: 20px; text-align: left; }   Table 1: Edge list     node 1 node 2 color weight     a b red 2   a c black 5   b c red 1    
Where the first two column define the nodes within the edge and the rest of the columns are edge attributes (color and weight). Pandas is a python library for data analysis that focus on creating dataframes to work with tables. Here, we will be reading a table using pandas and converting it to a graph-tool Graph object.
import pandas as pd import graph_tool.all as gt import numpy as np # Load table df = pd.read_csv(&amp;#34;table.csv&amp;#34;) g = gt.Graph() # Set property maps for edge attributes weight = g.new_edge_property(&amp;#39;int&amp;#39;) color = g.new_edge_property(&amp;#39;string&amp;#39;) # Create numpy array of edgelist edglist = df.values # Add edges node_id = g.add_edge_list(edgelist, hashed=True, eprops=[color, weight]) # Access node id of each vertex for node in range(g.num_vertices()): print(&amp;#34;Node {} has id: {}&amp;#34;.format(node, node_id[node])) Now we are ready to use the nice algorithms of graph-tool. Before saving your network, remember to also save the node ids or labels as an internal vertex property map of the graph:
g.vertex_properties[&amp;#39;node_id&amp;#39;] = node_id # Same with edge properties `color` and `weight` g.edge_properties[&amp;#39;color&amp;#39;] = color g.edge_properties[&amp;#39;weight&amp;#39;] = weight # Save graph g.save(&amp;#39;my_network.graphml&amp;#39;)]]></content:encoded>
    </item>
    <item>
      <title>Using pandas for network analysis</title>
      <link>https://rodogi.github.io/using-pandas-for-network-analysis/</link>
      <pubDate>Wed, 15 May 2019 05:00:00 UT</pubDate>
      <dc:creator>[Rodrigo Dorantes-Gilardi]</dc:creator>
      <guid>https://rodogi.github.io/using-pandas-for-network-analysis/</guid>
      <description>Network analysis Networkx is a well known python module for the analysis of networks. I used it a lot during my PhD for the creation of protein networks and to compare them. I stopped using it for a while after I moved to the industry as a data scientist.
My job consisted 90% of the time to process data (pre-process, clean, feature creation, wrangling) before modeling anything. Pandas is indeed a data-analysis library for python, and a very good one.</description>
      <content:encoded><![CDATA[ Network analysis Networkx is a well known python module for the analysis of networks. I used it a lot during my PhD for the creation of protein networks and to compare them. I stopped using it for a while after I moved to the industry as a data scientist.
My job consisted 90% of the time to process data (pre-process, clean, feature creation, wrangling) before modeling anything. Pandas is indeed a data-analysis library for python, and a very good one.
Problem I came back to the academy not so long ago to work on gene regulatory networks and decided to dust my networkx skills. When doing network analysis, it is often the goal to deal with the structure (or topology) of the network. For this, networkx is great.
However, I need to deal also with the attributes of nodes and edges, with make the task more complex.
For instance, a simple task like asking networkx what is the node with the maximum degree becomes this, where G is a network of size 20,000:
degree_sequence = sorted([d for n, d in G.degree()], reverse=True) dmax = max(degree_sequence) Or if we want to know the name of the node as well:
nmax, dmax = sorted(G.degree, key=lambda x: x[1], reverse=True)[0] In my opinion, both ways are a bit too verbose for such an important network parameter.
Pandas to the rescue To get the max degree of network, we used G.degree which is a DegreeView class in networkx: a dict-like structure. Other classes like DegreeView are:
 NodeView EdgeView NodeDataView EdgeDataView  As you can see, dict-like structures are the way to view the network attributes in networkx. Dict-like structures are not optimal for data analysis, but they are just fine to define a pandas dataframe with little code:
import pandas as pd # data frame with edgelist df_edges = pd.DataFrame(G.edges(), columns=[&amp;#34;node_1&amp;#34;, &amp;#34;node_2&amp;#34;]) # data frame with edgelist &#43; edge attributes df_edges_data = pd.DataFrame(G.edges(data=&amp;#34;weight&amp;#34;), columns=[&amp;#34;node_1&amp;#34;, &amp;#34;node_2&amp;#34;, &amp;#34;weight&amp;#34;]) # degree dataframe df_degree = pd.DataFrame(G.degree(), columns=[&amp;#34;node&amp;#34;, &amp;#34;degree&amp;#34;]) # weighted degree dataframe df_weighted_degree = pd.DataFrame(G.degree(weight=&amp;#34;weight&amp;#34;), columns=[&amp;#34;node&amp;#34;, &amp;#34;weighted degree&amp;#34;])]]></content:encoded>
    </item>
    <item>
      <title>Adding arrows to networkx</title>
      <link>https://rodogi.github.io/adding-arrows-to-networkx/</link>
      <pubDate>Tue, 29 May 2018 05:00:00 UT</pubDate>
      <dc:creator>[Rodrigo Dorantes-Gilardi]</dc:creator>
      <guid>https://rodogi.github.io/adding-arrows-to-networkx/</guid>
      <description>No arrows in networkx Believe it or not, the popular network package networkx didn&amp;rsquo;t have arrows to draw directed networks. Instead, it used some ugly rectangles to indicate direction.
Networkx is a package that I use regularly, and I wanted to contribute to the open source community that had given me so much, so I decided to implement the arrows.
Before, a network would look like this:
   Figure 1: Example of an old directed network.</description>
      <content:encoded><![CDATA[ No arrows in networkx Believe it or not, the popular network package networkx didn&amp;rsquo;t have arrows to draw directed networks. Instead, it used some ugly rectangles to indicate direction.
Networkx is a package that I use regularly, and I wanted to contribute to the open source community that had given me so much, so I decided to implement the arrows.
Before, a network would look like this:
   Figure 1: Example of an old directed network.    Arrows in networkx The flow I used for my contribution was the following:
 Open an issue on the networkx&amp;rsquo; github repo. After I was told the issue was worth it, I created a pull-request. After some back and forth discussion, they pulled my code!  Now, a directed network looks like this:
   Figure 2: Example of an actual directed network.    This contribution really made me learn a lot about the code behind the drawings of networkx, but also about matplotlib. I think that contributing to a project is a great idea to learn how to code better and to give something to the community.
]]></content:encoded>
    </item>
    <item>
      <title>Folding python code in Emacs</title>
      <link>https://rodogi.github.io/folding-python-code-in-emacs/</link>
      <pubDate>Mon, 19 Mar 2018 06:00:00 UT</pubDate>
      <dc:creator>[Rodrigo Dorantes]</dc:creator>
      <guid>https://rodogi.github.io/folding-python-code-in-emacs/</guid>
      <description>Purpose  I use python in my every-day work and I&amp;rsquo;m starting to use (and love) Emacs. I use vimish-folding package to fold code in Emacs. It allows you to define your own foldings and remembers them for the next time you open the file. Comming from vim I miss having my functions and classes folded out-of-the-box. Unfortunately you don&amp;rsquo;t have that in vimish-folding, but it&amp;rsquo;s easy to implemented a function to do just that: Fold every code-block in your buffer.</description>
      <content:encoded><![CDATA[ Purpose  I use python in my every-day work and I&amp;rsquo;m starting to use (and love) Emacs. I use vimish-folding package to fold code in Emacs. It allows you to define your own foldings and remembers them for the next time you open the file. Comming from vim I miss having my functions and classes folded out-of-the-box. Unfortunately you don&amp;rsquo;t have that in vimish-folding, but it&amp;rsquo;s easy to implemented a function to do just that: Fold every code-block in your buffer.  The Function ;; Fold code-blocks in python (defun fold-python-blocks () &amp;#34;Fold all code blocks in python&amp;#34; (interactive) (forward-word) ; start with the second word (setq p (point)) (while (forward-word) (backward-word) (setq col (current-column)) (forward-word) (if (= col 0) (progn (setq p1 (car (bounds-of-thing-at-point &amp;#39;word))) (vimish-fold p p1) (setq p p1) (goto-char p) (forward-word)))) (vimish-fold p (buffer-size)) (goto-char 1)) Code Snippet 1: Add the following code to your init.el file to fold code blocks in python.  You can use the previous function by typing M-x fold-python-blocks. This will fold each code block in your file, including code out of functions and classes, for instance, after a sentence of the style: #&#43;BEGIN_SRC python if name == &amp;ldquo;main&amp;ldquo;: #&#43;END_SR
]]></content:encoded>
    </item>
  </channel>
</rss>
