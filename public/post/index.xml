<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <docs>https://blogs.law.harvard.edu/tech/rss</docs>
    <title>Posts on rodrigo dorantes-gilardi</title>
    <link>rodogi.github.com/post/</link>
    <description>Recent content in Posts on rodrigo dorantes-gilardi</description>
    <image>
      <title>Posts on rodrigo dorantes-gilardi</title>
      <link>rodogi.github.com/post/</link>
      <url>https://source.unsplash.com/collection/983219/2000x1322</url>
    </image>
    <ttl>1440</ttl>
    <generator>After Dark 9.1.0 (Hugo 0.58.2)</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 19 Sep 2019 17:08:44 UT</lastBuildDate>
    <atom:link href="rodogi.github.com/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What cities appear more often in El País articles?</title>
      <link>rodogi.github.com/what-cities-appear-more-often-in-el-pa%C3%ADs-articles/</link>
      <pubDate>Mon, 22 Jul 2019 05:00:00 UT</pubDate>
      <dc:creator>[Rodrigo Dorantes-Gilardi]</dc:creator>
      <guid>rodogi.github.com/what-cities-appear-more-often-in-el-pa%C3%ADs-articles/</guid>
      <description>Introduction El País is one of the most well-known newspapers in the Hispanic world. Personally, it is one of my favorites as its American (Latin American) version has news from all over the region (I live in Mexico).
I&amp;rsquo;ve been an `El País&amp;rsquo; reader for a few years now, and I can&amp;rsquo;t help but notice that the Latin American version is not that well balanced. Indeed, most of the articles I see on their front page come from Mexico.</description>
      <content:encoded><![CDATA[ Introduction El País is one of the most well-known newspapers in the Hispanic world. Personally, it is one of my favorites as its American (Latin American) version has news from all over the region (I live in Mexico).
I&amp;rsquo;ve been an `El País&amp;rsquo; reader for a few years now, and I can&amp;rsquo;t help but notice that the Latin American version is not that well balanced. Indeed, most of the articles I see on their front page come from Mexico.
In order to get the countries of the main articles, I took all the articles on the front-page from 2018 using python modules requests and beautifulsoup.
Results El País front-page website is written in html and has its articles separated by &amp;lt;article&amp;gt; and &amp;lt;/article&amp;gt; tags. Inside these tags you can find the title of the article with the class &amp;quot;articulo-titulo&amp;quot; and the location of the article with class &amp;quot;articulo-localizacion&amp;quot; inside a dev tag.
After getting the text from the article with:
import requests from bs4 import BeautifulSoup r = requests.get(&amp;#39;https://elpais.com/elpais/portada_america.html&amp;#39;) soup = BeautifulSoup(r,text, &amp;#39;html&amp;#39;) articles = soup.find_all(&amp;#39;article&amp;#39;, attrs={&amp;#39;class&amp;#39;: &amp;#39;articulo&amp;#39;}) loc = soup.find_all(&amp;#39;span&amp;#39;, attrs={&amp;#39;class&amp;#39;: &amp;#39;articulo-localizacion&amp;#39;}) Using calendar and doing the proper formatting for months and days, it&amp;rsquo;s easy to parse through a year of front-page articles. The resulting 33,285 articles contain:
 17,368 not found locations 703 cities 52 cities with more than 20 appearances in an article (See 1) The most frequent city is Madrid (3327) following by Mexico City (2191)  
   Figure 1: Frequency of cities with more than 20 appearances in El País front-page, Latin American version.    Conclusion Even if the version I scanned was the Latin American version,
 Madrid still upholds the most appearances Mexico City is second place Two U.S. cities are third and fourth Followed by Buenos Aires and Bogotá  Overall, Latin American cities seem to be over-represented (world-wide-like), but Mexico City is the only Latin American city that appears to be preferred by the editors. Nonetheless, the journal is Spaniard and Spanish news seem to have the most articles even in the Latin American version of the newspaper.
]]></content:encoded>
    </item>
    <item>
      <title>Create a network with Graph-tool and Pandas</title>
      <link>rodogi.github.com/create-a-network-with-graph-tool-and-pandas/</link>
      <pubDate>Wed, 26 Jun 2019 05:00:00 UT</pubDate>
      <dc:creator>[Rodrigo Dorantes-Gilardi]</dc:creator>
      <guid>rodogi.github.com/create-a-network-with-graph-tool-and-pandas/</guid>
      <description>Graph-tool Recently, I discovered the python package graph-tool for network analysis. The advantage of graph-tool over the very popular networkx is the speed, as said by its creator:
Contrary to most other python modules with similar functionality, the core data structures and
algorithms are implemented in C&#43;&#43;, making extensive use of template metaprogramming, based heavily
on the Boost Graph Library. This confers it a level of performance that is comparable (both in</description>
      <content:encoded><![CDATA[ Graph-tool Recently, I discovered the python package graph-tool for network analysis. The advantage of graph-tool over the very popular networkx is the speed, as said by its creator:
Contrary to most other python modules with similar functionality, the core data structures and
algorithms are implemented in C&#43;&#43;, making extensive use of template metaprogramming, based heavily
on the Boost Graph Library. This confers it a level of performance that is comparable (both in
memory usage and computation time) to that of a pure C/C&#43;&#43; library.
---Tiago Peixoto
Some other really cool features (besides speed) of graph-tool are:
 Filters and views get subgraphs without creating a new python object Interactive drawing Beautiful layouts Topological algorithms  Cons:
 Could use more documentation examples.  Pandas &#43; graph-tool It is very convenient to analyze networks using tables to look at:
 Structural parameters (e.g. degree: mean, std, max min) Node and edge lists with attributes  And even have the network in the form of an edge-list of the sort:
 .my-table th, .my-table td { padding: 20px; text-align: left; }   Table 1: Edge list     node 1 node 2 color weight     a b red 2   a c black 5   b c red 1    
Where the first two column define the nodes within the edge and the rest of the columns are edge attributes (color and weight). Pandas is a python library for data analysis that focus on creating dataframes to work with tables. Here, we will be reading a table using pandas and converting it to a graph-tool Graph object.
import pandas as pd import graph_tool.all as gt import numpy as np # Load table df = pd.read_csv(&amp;#34;table.csv&amp;#34;) g = gt.Graph() # Set property maps for edge attributes weight = g.new_edge_property(&amp;#39;int&amp;#39;) color = g.new_edge_property(&amp;#39;string&amp;#39;) # Create numpy array of edgelist edglist = df.values # Add edges node_id = g.add_edge_list(edgelist, hashed=True, eprops=[color, weight]) # Access node id of each vertex for node in range(g.num_vertices()): print(&amp;#34;Node {} has id: {}&amp;#34;.format(node, node_id[node])) Now we are ready to use the nice algorithms of graph-tool. Before saving your network, remember to also save the node ids or labels as an internal vertex property map of the graph:
g.vertex_properties[&amp;#39;node_id&amp;#39;] = node_id # Same with edge properties `color` and `weight` g.edge_properties[&amp;#39;color&amp;#39;] = color g.edge_properties[&amp;#39;weight&amp;#39;] = weight # Save graph g.save(&amp;#39;my_network.graphml&amp;#39;)]]></content:encoded>
    </item>
    <item>
      <title>Using pandas for network analysis</title>
      <link>rodogi.github.com/using-pandas-for-network-analysis/</link>
      <pubDate>Wed, 15 May 2019 05:00:00 UT</pubDate>
      <dc:creator>[Rodrigo Dorantes-Gilardi]</dc:creator>
      <guid>rodogi.github.com/using-pandas-for-network-analysis/</guid>
      <description>Network analysis Networkx is a well known python module for the analysis of networks. I used it a lot during my PhD for the creation of protein networks and to compare them. I stopped using it for a while after I moved to the industry as a data scientist.
My job consisted 90% of the time to process data (pre-process, clean, feature creation, wrangling) before modeling anything. Pandas is indeed a data-analysis library for python, and a very good one.</description>
      <content:encoded><![CDATA[ Network analysis Networkx is a well known python module for the analysis of networks. I used it a lot during my PhD for the creation of protein networks and to compare them. I stopped using it for a while after I moved to the industry as a data scientist.
My job consisted 90% of the time to process data (pre-process, clean, feature creation, wrangling) before modeling anything. Pandas is indeed a data-analysis library for python, and a very good one.
Problem I came back to the academy not so long ago to work on gene regulatory networks and decided to dust my networkx skills. When doing network analysis, it is often the goal to deal with the structure (or topology) of the network. For this, networkx is great.
However, I need to deal also with the attributes of nodes and edges, with make the task more complex.
For instance, a simple task like asking networkx what is the node with the maximum degree becomes this, where G is a network of size 20,000:
degree_sequence = sorted([d for n, d in G.degree()], reverse=True) dmax = max(degree_sequence) Or if we want to know the name of the node as well:
nmax, dmax = sorted(G.degree, key=lambda x: x[1], reverse=True)[0] In my opinion, both ways are a bit too verbose for such an important network parameter.
Pandas to the rescue To get the max degree of network, we used G.degree which is a DegreeView class in networkx: a dict-like structure. Other classes like DegreeView are:
 NodeView EdgeView NodeDataView EdgeDataView  As you can see, dict-like structures are the way to view the network attributes in networkx. Dict-like structures are not optimal for data analysis, but they are just fine to define a pandas dataframe with little code:
import pandas as pd # data frame with edgelist df_edges = pd.DataFrame(G.edges(), columns=[&amp;#34;node_1&amp;#34;, &amp;#34;node_2&amp;#34;]) # data frame with edgelist &#43; edge attributes df_edges_data = pd.DataFrame(G.edges(data=&amp;#34;weight&amp;#34;), columns=[&amp;#34;node_1&amp;#34;, &amp;#34;node_2&amp;#34;, &amp;#34;weight&amp;#34;]) # degree dataframe df_degree = pd.DataFrame(G.degree(), columns=[&amp;#34;node&amp;#34;, &amp;#34;degree&amp;#34;]) # weighted degree dataframe df_weighted_degree = pd.DataFrame(G.degree(weight=&amp;#34;weight&amp;#34;), columns=[&amp;#34;node&amp;#34;, &amp;#34;weighted degree&amp;#34;])]]></content:encoded>
    </item>
    <item>
      <title>Adding arrows to networkx</title>
      <link>rodogi.github.com/adding-arrows-to-networkx/</link>
      <pubDate>Tue, 29 May 2018 05:00:00 UT</pubDate>
      <dc:creator>[Rodrigo Dorantes-Gilardi]</dc:creator>
      <guid>rodogi.github.com/adding-arrows-to-networkx/</guid>
      <description>No arrows in networkx Believe it or not, the popular network package networkx didn&amp;rsquo;t have arrows to draw directed networks. Instead, it used some ugly rectangles to indicate direction.
Networkx is a package that I use regularly, and I wanted to contribute to the open source community that had given me so much, so I decided to implement the arrows.
Before, a network would look like this:
   Figure 1: Example of an old directed network.</description>
      <content:encoded><![CDATA[ No arrows in networkx Believe it or not, the popular network package networkx didn&amp;rsquo;t have arrows to draw directed networks. Instead, it used some ugly rectangles to indicate direction.
Networkx is a package that I use regularly, and I wanted to contribute to the open source community that had given me so much, so I decided to implement the arrows.
Before, a network would look like this:
   Figure 1: Example of an old directed network.    Arrows in networkx The flow I used for my contribution was the following:
 Open an issue on the networkx&amp;rsquo; github repo. After I was told the issue was worth it, I created a pull-request. After some back and forth discussion, they pulled my code!  Now, a directed network looks like this:
   Figure 2: Example of an actual directed network.    This contribution really made me learn a lot about the code behind the drawings of networkx, but also about matplotlib. I think that contributing to a project is a great idea to learn how to code better and to give something to the community.
]]></content:encoded>
    </item>
    <item>
      <title>Folding python code in Emacs</title>
      <link>rodogi.github.com/folding-python-code-in-emacs/</link>
      <pubDate>Mon, 19 Mar 2018 06:00:00 UT</pubDate>
      <dc:creator>[Rodrigo Dorantes]</dc:creator>
      <guid>rodogi.github.com/folding-python-code-in-emacs/</guid>
      <description>Purpose  I use python in my every-day work and I&amp;rsquo;m starting to use (and love) Emacs. I use vimish-folding package to fold code in Emacs. It allows you to define your own foldings and remembers them for the next time you open the file. Comming from vim I miss having my functions and classes folded out-of-the-box. Unfortunately you don&amp;rsquo;t have that in vimish-folding, but it&amp;rsquo;s easy to implemented a function to do just that: Fold every code-block in your buffer.</description>
      <content:encoded><![CDATA[ Purpose  I use python in my every-day work and I&amp;rsquo;m starting to use (and love) Emacs. I use vimish-folding package to fold code in Emacs. It allows you to define your own foldings and remembers them for the next time you open the file. Comming from vim I miss having my functions and classes folded out-of-the-box. Unfortunately you don&amp;rsquo;t have that in vimish-folding, but it&amp;rsquo;s easy to implemented a function to do just that: Fold every code-block in your buffer.  The Function ;; Fold code-blocks in python (defun fold-python-blocks () &amp;#34;Fold all code blocks in python&amp;#34; (interactive) (forward-word) ; start with the second word (setq p (point)) (while (forward-word) (backward-word) (setq col (current-column)) (forward-word) (if (= col 0) (progn (setq p1 (car (bounds-of-thing-at-point &amp;#39;word))) (vimish-fold p p1) (setq p p1) (goto-char p) (forward-word)))) (vimish-fold p (buffer-size)) (goto-char 1)) Code Snippet 1: Add the following code to your init.el file to fold code blocks in python.  You can use the previous function by typing M-x fold-python-blocks. This will fold each code block in your file, including code out of functions and classes, for instance, after a sentence of the style: #&#43;BEGIN_SRC python if name == &amp;ldquo;main&amp;ldquo;: #&#43;END_SR
]]></content:encoded>
    </item>
  </channel>
</rss>
